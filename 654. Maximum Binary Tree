654. Maximum Binary Tree
Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:  The root is the maximum number 
in the array. The left subtree is the maximum tree constructed from left part subarray divided by the maximum number. The right subtree 
is the maximum tree constructed from right part subarray divided by the maximum number. Construct the maximum tree by the given array
and output the root node of this tree.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if(nums.length ==0){return null;}
        return helper(nums, 0 , nums.length-1);
    }
    
    public TreeNode helper(int[] nums, int start, int end){
        if(start > end ){
            return null;
        }
        
        int max = Integer.MIN_VALUE;
        int maxindex = -1;
        for(int i = start; i<=end; i++){
            if(nums[i] > max){
                max = nums[i];
                maxindex = i;
            }
        }
        TreeNode node = new TreeNode (max);
        node.left = helper(nums, start, maxindex-1);
        node.right = helper(nums,maxindex+1, end);
        return node;
    }
}



