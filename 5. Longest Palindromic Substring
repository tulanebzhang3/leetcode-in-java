5. Longest Palindromic Substring
class Solution {
    public String longestPalindrome(String s) {
        if(s.length() ==0 || s.length() == 1){return s;}
        String result ="";
        int max = 0;
        for (int i = 0; i < s.length(); i++){
            int length = length(s,i);
            if(length > max){
                max = length;
                if(length %2 ==1){
                    result = s.substring(i-length/2, i+length/2+1);
                }else{
                    result = s.substring(i-length/2+1, i+ length/2+1);
                }
            }
        } return result;
    }
    
    public int length(String s, int pos){
        int start = pos-1;
        int end = pos+1;
        int sum1 = 1;
        int sum2 = 0;
        while(start>=0 && end <s.length()){
            if(s.charAt(start) == s.charAt(end)){
                sum1+=2;
                start--;
                end++;
            }else{
                break;
            } 
        }
        int start1 = pos;
        int end1 = pos+1;
        while( start1 >=0 && end1 <s.length()){
            if (s.charAt(start1) == s.charAt(end1)){
                sum2+=2;
                start1--;
                end1++;
            }else{
                break;
            }
        }
        return Math.max(sum1, sum2);
    }}
