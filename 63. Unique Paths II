63. Unique Paths II
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).  
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of 
the grid (marked 'Finish' in the diagram below).  Now consider if some obstacles are added to the grids.
How many unique paths would there be?
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int [][] arr = new int [m][n];
        for (int i = 0; i< m; i++){
            for (int j = 0; j< n; j++){
                if (obstacleGrid[i][j] == 1) {
                    arr[i][j] = -1;
                }
            }
        }
        for (int i = 0; i< arr.length; i++){
            if (arr[i][0] == -1) {break;}
            arr[i][0] = 1;
        }
        for (int i = 0; i< arr[0].length; i++){
            if (arr[0][i] == -1) {break;}
            arr[0][i] = 1;
        }
        
        for (int i = 1; i< arr.length; i++){
            for (int j = 1; j < arr[0].length; j++){
                if(arr[i][j] == -1){continue;}
                if (arr[i-1][j] == -1 && arr[i][j-1] != -1){ 
                    arr[i][j] = arr[i][j-1];
                } else if (arr[i-1][j] != -1 && arr[i][j-1] == -1){
                    arr[i][j] = arr[i-1][j];
                } else if (arr[i-1][j] == -1 && arr[i][j-1] == -1){
                    arr[i][j] = -1;
                } else{
                arr[i][j] = arr[i-1][j] + arr[i][j-1];}
            }
        }
        if(arr[m-1][n-1] <0 ) return 0;
        return arr[m-1][n-1];


        
    }
}
