572. Subtree of Another Tree
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s.
A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of 
itself.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
         if(t == null){return true;}
             return s != null && (sameTree(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t));
        
    }
    
    public boolean sameTree (TreeNode node1, TreeNode node2){
        if(node1 == null && node2 ==  null){
            return true;
        } else if (node1 == null || node2 == null){
            return false;
        } else{
            return node1.val == node2.val && sameTree(node1.left, node2.left) && sameTree(node1.right, node2.right);
        }
    }
}
