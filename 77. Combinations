77. Combinations
Share Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        int[] nums = new int [n];
        for (int i = 0; i< n; i++){
            nums[i] = i+1;
        }
        List<List<Integer>> result = new ArrayList();
        helper(result, new ArrayList(), nums, k, 0);
        return result;
    }
    
    public void helper (List<List<Integer>> result, List<Integer> list, int[] nums, int k, int pos ){
        if(list.size() == k){
            result.add(new ArrayList(list));
            return;
        }
        
        for (int i = pos; i < nums.length; i++){
            list.add(nums[i]);
            helper(result, list, nums, k, i+1);
            list.remove(list.size()-1);
        }
    }
}
