47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList();
        boolean[] used = new boolean[ nums.length];
        Arrays.sort(nums);
        helper(result, new ArrayList(), nums, used);
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> list, int[] nums, boolean [] used){
        if (list.size() == nums.length){
            result.add(new ArrayList(list));
            return;
        }
        for(int i = 0; i< nums.length; i++){
           if(!used[i]){
           if(i!=0 && nums[i]==nums[i-1] && used[i-1]){
                    continue;
                }
            list.add(nums[i]);
            used[i] = true;
            helper(result,list, nums, used);
            list.remove(list.size()-1);
            used[i] = false;
           }
        }
    }
}
