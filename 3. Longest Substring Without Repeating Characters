3. Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet();
        int start = 0;
        int end = 0;
        int max = 0;
        while (start < s.length() && end < s.length()){
            if (!set.contains(s.charAt(end))){
                set.add(s.charAt(end));
                max = Math.max(max, end - start +1);
                end++;
            }else{
                set.remove(s.charAt(start));
                start++;
            }
        }
        return max;
            
    }
}
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map <Character, Integer> map = new HashMap();
        int start = 0;
        int end = 0;
        int answer = 0;
        while (start < s.length() && end < s.length()){
            if (map.containsKey(s.charAt(end))){
                start = Math.max(start,map.get(s.charAt(end))+1);
            }
            map.put(s.charAt(end), end);
            answer = Math.max(answer, end-start +1);
            end++;
        }
        return answer;    
    }
}
