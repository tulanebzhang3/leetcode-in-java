40. Combination Sum II
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where 
the candidate numbers sums to target.  Each number in candidates may only be used once in the combination.
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList();
        boolean[] used = new boolean[candidates.length];
        helper(result, new ArrayList(), candidates, target, 0, used);
        return result;
        
    }
    
    public void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int target, int pos, boolean[] used){
        if(target == 0){
            result.add(new ArrayList(list));
            return;
        }
        
        for (int i = pos; i< nums.length; i++){
            if(i>0 && nums[i] == nums[i-1] && !used[i-1]){continue;}
            if(target -nums[i] >=0){
                list.add(nums[i]);
                used[i] = true;
                helper(result, list, nums, target-nums[i], i+1, used);
                list.remove(list.size()-1);
                used[i] = false;
            }else{
                break;
            }
        }
        
    }
}
