216. Combination Sum III
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and 
each combination should be a unique set of numbers.
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = new int[9];
        int number = 1;
        for(int i = 0; i < nums.length; i++){
            nums[i] = number;
            number++;
        }
        List<List<Integer>> result = new ArrayList();
        helper(result, new ArrayList(), k, n, 0, nums);
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> list, int k, int target, int pos, int[] nums){
        if(list.size() == k && target ==0){
            result.add(new ArrayList(list));
            return;
        }
        if(list.size() ==k && target != 0){
            return;
        }
        
        for(int i = pos; i< nums.length; i++){
            list.add(nums[i]);
            helper(result, list, k, target-nums[i], i+1,nums);
            list.remove(list.size()-1);
        }
    }
}
