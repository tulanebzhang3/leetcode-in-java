2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.  You may assume the two numbers do not contain any leading zero,
except the number 0 itself.
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre1 = null;
        ListNode pre2 = null;
        ListNode cur1 = l1;
        ListNode cur2 = l2;
        int overDigit = 0;
        while(cur1 != null && cur2 != null){
            int val = cur1.val;
            cur1.val = (val + cur2.val + overDigit) % 10;
            overDigit = (val + cur2.val + overDigit) / 10;            
            pre1 = cur1;
            pre2 = cur2;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        if ( cur1 == null && cur2 != null){
            pre1.next = cur2;
            while (cur2 != null){
            int val = cur2.val;
            cur2 .val = (val + overDigit) %10;
            overDigit = (val + overDigit) /10;
            pre1 = cur2;
            cur2 = cur2.next;
        }
        } else if (cur2 == null && cur1 != null){
            while (cur1 != null){
            int val = cur1.val;
            cur1 .val = (val + overDigit) %10;
            overDigit = (val + overDigit) /10;
            pre1 = cur1;
            cur1 = cur1.next;
        }
        }
        if(overDigit != 0){
            pre1.next = new ListNode(overDigit);
        }
        return l1;
    }
}
