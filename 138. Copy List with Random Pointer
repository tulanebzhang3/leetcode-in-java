138. Copy List with Random Pointer
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) {return head;}
        Node dummy = new Node(-1);
        Node pre = dummy;
        Node cur1 = head;
        Map<Node, Node> map = new HashMap();
        while(cur1 != null){
            Node node = new Node(cur1.val);
            map.put(cur1, node);
            pre.next = node;
            pre= node;
            cur1 = cur1.next;
        }
        for(Node n : map.keySet()){
            map.get(n).random = map.get(n.random);
        }
        return dummy.next;
        

    }
}
