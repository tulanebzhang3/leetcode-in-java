437. Path Sum III
You are given a binary tree in which each node contains an integer value.  Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to
child nodes).  The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int number = 0;
    public int pathSum(TreeNode root, int sum) {
        if(root == null){return 0;}
        int left = pathSum(root.left, sum);
        int right =pathSum(root.right, sum);
        helper(root, sum);
        int result = left+right+number;
        number = 0;
        return result;
    }
    public void helper(TreeNode root, int sum){
        sum-= root.val;
        if(sum == 0){
            number++;
        }
        if(root.left != null){
            helper(root.left, sum);
        }
        if(root.right!= null){
            helper(root.right, sum);
        }
    }
}
